FROM python:3.11-slim-bullseye

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive
ENV DJANGO_SETTINGS_MODULE=statuspage.settings
ENV ALLOWED_HOSTS=*
ENV DJANGO_DEBUG=0
ENV STATUS_PAGE_CONFIGURATION=statuspage.configuration

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Create necessary directories and configuration files
RUN mkdir -p /app/statuspage/static /app/statuspage/media

# Create a specific settings file for Kubernetes deployment
RUN echo '\
"""\
Status Page Configuration for Kubernetes deployment\
"""\
import os\
\
# Core configuration\
ALLOWED_HOSTS = ["*", "status.elad-avior.com"]\
DEBUG = False\
\
# Database configuration from environment variables\
DATABASES = {\
    "default": {\
        "ENGINE": "django.db.backends.postgresql",\
        "NAME": os.environ.get("DB_NAME", "statuspage"),\
        "USER": os.environ.get("DB_USER", "postgres"),\
        "PASSWORD": os.environ.get("DB_PASSWORD", ""),\
        "HOST": os.environ.get("DB_HOST", "localhost"),\
        "PORT": os.environ.get("DB_PORT", "5432"),\
    }\
}\
\
# Redis/Celery configuration\
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "")\
CELERY_RESULT_BACKEND = os.environ.get("CELERY_BROKER_URL", "")\
\
# Status components\
STATUS_COMPONENTS = [\
    {\
        "name": "Web Application",\
        "description": "Main web interface",\
        "group": "User Services",\
    },\
    {\
        "name": "API",\
        "description": "API Services",\
        "group": "User Services",\
    },\
    {\
        "name": "Database",\
        "description": "Database Services",\
        "group": "Infrastructure",\
    }\
]\
' > /app/statuspage/statuspage/configuration.py

# Add health check endpoint
RUN echo '\
from django.http import HttpResponse\
\
def health_check(request):\
    return HttpResponse("OK", content_type="text/plain")\
' > /app/statuspage/statuspage/health_check.py

# Update URL patterns to include health check
RUN sed -i -e '/from django.urls import path/a\from .health_check import health_check' \
    -e '/urlpatterns = \[/a\    path("health/", health_check, name="health_check"),' \
    /app/statuspage/statuspage/urls.py || echo "URL pattern update failed, but continuing"

# Generate secret key
RUN python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())" > /app/statuspage/secretkey.py

# Expose port
EXPOSE 8000

# Start Gunicorn
CMD ["gunicorn", "--chdir", "statuspage", "--bind", "0.0.0.0:8000", "statuspage.wsgi:application"]
