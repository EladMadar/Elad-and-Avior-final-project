version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: development
    ports:
      - "8000:8000"
    volumes:
      - ./statuspage:/app/statuspage
      - ./media:/app/media
      - ./static:/app/static
    environment:
      - DJANGO_SETTINGS_MODULE=statuspage.settings
      - DJANGO_DEBUG=1
      - DATABASE_URL=postgres://statuspage:statuspage@db:5432/statuspage
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python statuspage/manage.py runserver 0.0.0.0:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
      target: development
    volumes:
      - ./statuspage:/app/statuspage
    environment:
      - DJANGO_SETTINGS_MODULE=statuspage.settings
      - DATABASE_URL=postgres://statuspage:statuspage@db:5432/statuspage
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python statuspage/manage.py rqworker default
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "[r]qworker"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build:
      context: .
      dockerfile: Dockerfile.worker
      target: development
    volumes:
      - ./statuspage:/app/statuspage
    environment:
      - DJANGO_SETTINGS_MODULE=statuspage.settings
      - DATABASE_URL=postgres://statuspage:statuspage@db:5432/statuspage
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      - redis
      - db
    command: celery -A statuspage worker -l INFO
    healthcheck:
      test: ["CMD", "celery", "-A", "statuspage", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  flower:
    build:
      context: .
      dockerfile: Dockerfile.worker
      target: development
    volumes:
      - ./statuspage:/app/statuspage
    ports:
      - "5555:5555"
    environment:
      - DJANGO_SETTINGS_MODULE=statuspage.settings
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      - redis
      - celery
    command: celery -A statuspage flower --port=5555
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=statuspage
      - POSTGRES_USER=statuspage
      - POSTGRES_PASSWORD=statuspage
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U statuspage"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.2.0
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
